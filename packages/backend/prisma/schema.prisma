// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RiskTolerance {
  conservative
  moderate
  aggressive
}

enum ProgressStatus {
  not_started
  in_progress
  completed
}

enum ContentType {
  text
  video
  interactive
  calculator
  ai_prompt
}

enum GoalStatus {
  active
  completed
  paused
  abandoned
}

// User Models
model User {
  id                String      @id @default(uuid())
  email             String      @unique @db.VarChar(255)
  password_hash     String      @db.VarChar(255)
  name              String      @db.VarChar(255)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  last_login        DateTime?
  profile_completed Boolean     @default(false)

  // Relations
  profile          UserProfile?
  progress         UserProgress[]
  section_progress SectionProgress[]
  calculators      CalculatorData[]
  goals            UserGoal[]
  achievements     Achievement[]
  conversations    AIConversation[]

  @@index([email])
  @@map("users")
}

model UserProfile {
  id                  String          @id @default(uuid())
  user_id             String          @unique
  age                 Int?
  current_income      Decimal?        @db.Decimal(12, 2)
  financial_goals     String[]
  risk_tolerance      RiskTolerance?
  has_debt            Boolean         @default(false)
  has_emergency_fund  Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_profiles")
}

// Module Models
model Module {
  id                  String          @id @default(uuid())
  phase_number        Int
  module_number       Int
  title               String          @db.VarChar(255)
  description         String?         @db.Text
  estimated_duration  Int?
  order_index         Int
  prerequisites       String[]
  created_at          DateTime        @default(now())

  // Relations
  content         ModuleContent[]
  progress        UserProgress[]
  calculators     CalculatorData[]
  conversations   AIConversation[]

  @@unique([phase_number, module_number])
  @@index([phase_number])
  @@index([order_index])
  @@map("modules")
}

model ModuleContent {
  id              String      @id @default(uuid())
  module_id       String
  section_number  Int
  section_title   String      @db.VarChar(255)
  content_type    ContentType
  content_data    Json
  order_index     Int
  created_at      DateTime    @default(now())

  // Relations
  module           Module            @relation(fields: [module_id], references: [id], onDelete: Cascade)
  section_progress SectionProgress[]

  @@index([module_id])
  @@index([order_index])
  @@map("module_content")
}

// Progress Models
model UserProgress {
  id                   String         @id @default(uuid())
  user_id              String
  module_id            String
  status               ProgressStatus @default(not_started)
  progress_percentage  Int            @default(0)
  started_at           DateTime?
  completed_at         DateTime?
  last_accessed        DateTime?
  time_spent_minutes   Int            @default(0)
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_id])
  @@index([user_id])
  @@index([module_id])
  @@index([status])
  @@map("user_progress")
}

model SectionProgress {
  id                String    @id @default(uuid())
  user_id           String
  module_content_id String
  completed         Boolean   @default(false)
  completed_at      DateTime?
  notes             String?   @db.Text
  created_at        DateTime  @default(now())

  // Relations
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module_content ModuleContent @relation(fields: [module_content_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_content_id])
  @@index([user_id])
  @@index([module_content_id])
  @@map("section_progress")
}

// Calculator Models
model CalculatorData {
  id              String   @id @default(uuid())
  user_id         String
  calculator_type String   @db.VarChar(100)
  calculator_name String   @db.VarChar(255)
  input_data      Json
  output_data     Json
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  module_id       String?

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [module_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([calculator_type])
  @@index([module_id])
  @@map("calculator_data")
}

// Goal Models
model UserGoal {
  id               String     @id @default(uuid())
  user_id          String
  goal_type        String     @db.VarChar(100)
  title            String     @db.VarChar(255)
  description      String?    @db.Text
  target_amount    Decimal?   @db.Decimal(12, 2)
  target_date      DateTime?  @db.Date
  current_progress Decimal    @default(0) @db.Decimal(12, 2)
  status           GoalStatus @default(active)
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
  @@map("user_goals")
}

// Achievement Models
model Achievement {
  id               String   @id @default(uuid())
  user_id          String
  achievement_type String   @db.VarChar(100)
  title            String   @db.VarChar(255)
  description      String?  @db.Text
  earned_at        DateTime @default(now())
  metadata         Json?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([achievement_type])
  @@map("achievements")
}

// AI Models
model AIConversation {
  id                   String   @id @default(uuid())
  user_id              String
  module_id            String?
  conversation_context String?  @db.VarChar(255)
  messages             Json
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [module_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([module_id])
  @@map("ai_conversations")
}
