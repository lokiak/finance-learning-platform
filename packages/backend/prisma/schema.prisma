// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RiskTolerance {
  conservative
  moderate
  aggressive
}

enum ProgressStatus {
  not_started
  in_progress
  completed
}

enum ContentType {
  text
  video
  interactive
  calculator
  ai_prompt
}

enum GoalStatus {
  active
  completed
  paused
  abandoned
}

enum EntryType {
  free_form
  module_reflection
  goal
  daily_checkin
  prompted
}

enum PromptCategory {
  money_mindset
  goal_setting
  challenges
  gratitude
  future_vision
  reflection
  celebration
}

enum TriggerType {
  module_complete
  goal_created
  goal_milestone
  mood_low
  streak
  time_based
  random
  onboarding
}

enum Theme {
  light
  dark
  auto
}

enum Season {
  spring
  summer
  autumn
  winter
}

// User Models
model User {
  id                String      @id @default(uuid())
  email             String      @unique @db.VarChar(255)
  password_hash     String      @db.VarChar(255)
  name              String      @db.VarChar(255)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  last_login        DateTime?
  profile_completed Boolean     @default(false)

  // Relations
  profile           UserProfile?
  progress          UserProgress[]
  section_progress  SectionProgress[]
  calculators       CalculatorData[]
  goals             UserGoal[]
  achievements      Achievement[]
  conversations     AIConversation[]
  journal_entries   JournalEntry[]
  mood_entries      MoodEntry[]
  preferences       UserPreferences?
  journaling_streak JournalingStreak?

  @@index([email])
  @@map("users")
}

model UserProfile {
  id                  String          @id @default(uuid())
  user_id             String          @unique
  age                 Int?
  current_income      Decimal?        @db.Decimal(12, 2)
  financial_goals     String[]
  risk_tolerance      RiskTolerance?
  has_debt            Boolean         @default(false)
  has_emergency_fund  Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_profiles")
}

// Module Models
model Module {
  id                  String          @id @default(uuid())
  phase_number        Int
  module_number       Int
  title               String          @db.VarChar(255)
  description         String?         @db.Text
  estimated_duration  Int?
  order_index         Int
  prerequisites       String[]
  created_at          DateTime        @default(now())

  // Relations
  content         ModuleContent[]
  progress        UserProgress[]
  calculators     CalculatorData[]
  conversations   AIConversation[]
  journal_entries JournalEntry[]

  @@unique([phase_number, module_number])
  @@index([phase_number])
  @@index([order_index])
  @@map("modules")
}

model ModuleContent {
  id              String      @id @default(uuid())
  module_id       String
  section_number  Int
  section_title   String      @db.VarChar(255)
  content_type    ContentType
  content_data    Json
  order_index     Int
  created_at      DateTime    @default(now())

  // Relations
  module           Module            @relation(fields: [module_id], references: [id], onDelete: Cascade)
  section_progress SectionProgress[]

  @@index([module_id])
  @@index([order_index])
  @@map("module_content")
}

// Progress Models
model UserProgress {
  id                   String         @id @default(uuid())
  user_id              String
  module_id            String
  status               ProgressStatus @default(not_started)
  progress_percentage  Int            @default(0)
  started_at           DateTime?
  completed_at         DateTime?
  last_accessed        DateTime?
  time_spent_minutes   Int            @default(0)
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_id])
  @@index([user_id])
  @@index([module_id])
  @@index([status])
  @@map("user_progress")
}

model SectionProgress {
  id                String    @id @default(uuid())
  user_id           String
  module_content_id String
  completed         Boolean   @default(false)
  completed_at      DateTime?
  notes             String?   @db.Text
  created_at        DateTime  @default(now())

  // Relations
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module_content ModuleContent @relation(fields: [module_content_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_content_id])
  @@index([user_id])
  @@index([module_content_id])
  @@map("section_progress")
}

// Calculator Models
model CalculatorData {
  id              String   @id @default(uuid())
  user_id         String
  calculator_type String   @db.VarChar(100)
  calculator_name String   @db.VarChar(255)
  input_data      Json
  output_data     Json
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  module_id       String?

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [module_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([calculator_type])
  @@index([module_id])
  @@map("calculator_data")
}

// Goal Models
model UserGoal {
  id               String     @id @default(uuid())
  user_id          String
  goal_type        String     @db.VarChar(100)
  title            String     @db.VarChar(255)
  description      String?    @db.Text
  target_amount    Decimal?   @db.Decimal(12, 2)
  target_date      DateTime?  @db.Date
  current_progress Decimal    @default(0) @db.Decimal(12, 2)
  status           GoalStatus @default(active)
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  // Relations
  user            User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  journal_entries JournalEntry[]

  @@index([user_id])
  @@index([status])
  @@map("user_goals")
}

// Achievement Models
model Achievement {
  id               String   @id @default(uuid())
  user_id          String
  achievement_type String   @db.VarChar(100)
  title            String   @db.VarChar(255)
  description      String?  @db.Text
  earned_at        DateTime @default(now())
  metadata         Json?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([achievement_type])
  @@map("achievements")
}

// AI Models
model AIConversation {
  id                   String   @id @default(uuid())
  user_id              String
  module_id            String?
  conversation_context String?  @db.VarChar(255)
  messages             Json
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [module_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([module_id])
  @@map("ai_conversations")
}

// Journal Models
model JournalEntry {
  id            String     @id @default(uuid())
  user_id       String
  entry_type    EntryType
  title         String?    @db.VarChar(500)
  content       Json       @db.JsonB
  mood          Int?       @db.SmallInt
  stress_level  Int?       @db.SmallInt
  energy_level  Int?       @db.SmallInt
  word_count    Int        @default(0)

  // Associations
  module_id     String?
  goal_id       String?
  prompt_id     String?

  // Metadata
  tags          String[]
  is_favorite   Boolean    @default(false)
  is_private    Boolean    @default(true)
  share_token   String?    @unique @db.VarChar(50)

  // Timestamps
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  // Relations
  user   User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module Module?       @relation(fields: [module_id], references: [id], onDelete: SetNull)
  goal   UserGoal?     @relation(fields: [goal_id], references: [id], onDelete: SetNull)
  prompt JournalPrompt? @relation(fields: [prompt_id], references: [id], onDelete: SetNull)

  @@index([user_id, created_at])
  @@index([user_id, entry_type])
  @@index([user_id, mood])
  @@index([share_token])
  @@map("journal_entries")
}

model JournalPrompt {
  id              String         @id @default(uuid())
  prompt_text     String         @db.Text
  category        PromptCategory
  subcategory     String?        @db.VarChar(100)

  // Targeting
  trigger_type    TriggerType
  trigger_config  Json?          @db.JsonB

  // Personalization
  uses_name       Boolean        @default(false)
  uses_goal_data  Boolean        @default(false)
  min_engagement  Int?

  // Metadata
  is_active       Boolean        @default(true)
  priority        Int            @default(0)
  created_at      DateTime       @default(now())

  // Relations
  entries JournalEntry[]

  @@index([category, is_active])
  @@index([trigger_type, is_active])
  @@map("journal_prompts")
}

model MoodEntry {
  id               String   @id @default(uuid())
  user_id          String

  // Mood data
  overall_mood     Int      @db.SmallInt
  financial_stress Int      @db.SmallInt
  energy_level     Int?     @db.SmallInt
  note             String?  @db.Text

  // Context
  journaled_today  Boolean  @default(false)
  completed_module Boolean  @default(false)
  worked_on_goal   Boolean  @default(false)

  created_at       DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([user_id, overall_mood])
  @@map("mood_entries")
}

model UserPreferences {
  id                    String   @id @default(uuid())
  user_id               String   @unique

  // Theme
  theme                 Theme    @default(auto)
  seasonal_theme        Boolean  @default(true)
  time_based_theme      Boolean  @default(true)
  preferred_season      Season?

  // Sound
  soundscape_enabled    Boolean  @default(false)
  soundscape_type       String?  @db.VarChar(50)
  soundscape_volume     Float    @default(0.5)
  sound_effects_enabled Boolean  @default(true)

  // Notifications
  journal_reminders     Boolean  @default(true)
  reminder_time         String?  @db.VarChar(10)
  reminder_frequency    String   @default("daily") @db.VarChar(20)

  // Content
  show_stress_exercises Boolean  @default(true)
  content_pacing        String   @default("medium") @db.VarChar(20)

  // Accessibility
  reduce_motion         Boolean  @default(false)
  high_contrast         Boolean  @default(false)
  font_size_adjust      Int      @default(0) @db.SmallInt

  updated_at            DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model JournalingStreak {
  id              String    @id @default(uuid())
  user_id         String    @unique

  current_streak  Int       @default(0)
  longest_streak  Int       @default(0)
  total_entries   Int       @default(0)

  last_entry_date DateTime?
  streak_started  DateTime?

  updated_at      DateTime  @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("journaling_streaks")
}
